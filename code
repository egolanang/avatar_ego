package com.example.myapplication
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CheckboxDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AvatarMain()
        }
    }
}

@Composable
fun AvatarMain() {
    MaterialTheme {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            AvatarScreen()
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AvatarScreen() {
    // state avatar (checkbox)
    var showBrows by remember { mutableStateOf(true) }
    var showEyes by remember { mutableStateOf(true) }
    var showNose by remember { mutableStateOf(true) }
    var showLips by remember { mutableStateOf(true) }

    // ukuran dan posisi wajah
    val FACE_RATIO = 0.65f
    val BROWS_RATIO = 0.30f
    val BROWS_OFFSET_Y = (-28).dp
    val EYES_RATIO = 0.24f
    val EYES_OFFSET_Y = (-4).dp
    val NOSE_RATIO = 0.11f
    val NOSE_OFFSET_Y = 28.dp
    val LIPS_RATIO = 0.15f
    val LIPS_OFFSET_Y = 55.dp

    Scaffold(
        topBar = {
            Box {
                Image(
                    painter = painterResource(R.drawable.paper),
                    contentDescription = "Pattern Background",
                    contentScale = ContentScale.Crop,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(70.dp)
                )

                TopAppBar(
                    title = {
                        Box(
                            modifier = Modifier.fillMaxWidth(),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "My Avatar",
                                color = Color.White,
                                fontSize = 20.sp,
                                modifier = Modifier
                                    .shadow(2.dp, RoundedCornerShape(10.dp))
                                    .background(Color(0xAA3E2723), RoundedCornerShape(10.dp))
                                    .padding(horizontal = 16.dp, vertical = 6.dp)
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = Color.Transparent
                    )
                )
            }
        }
    ) { inner ->
        Column(
            modifier = Modifier
                .padding(inner)
                .fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Avatar wajah
            Box(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth(),
                contentAlignment = Alignment.Center
            ) {
                Image(
                    painter = painterResource(R.drawable.face),
                    contentDescription = "Face Base",
                    contentScale = ContentScale.Fit,
                    modifier = Modifier.fillMaxSize(FACE_RATIO)
                )

                if (showBrows) {
                    Image(
                        painter = painterResource(R.drawable.eyebrows),
                        contentDescription = "Eyebrows",
                        modifier = Modifier
                            .fillMaxSize(BROWS_RATIO)
                            .offset(y = BROWS_OFFSET_Y)
                    )
                }

                if (showEyes) {
                    Image(
                        painter = painterResource(R.drawable.eyes),
                        contentDescription = "Eyes",
                        modifier = Modifier
                            .fillMaxSize(EYES_RATIO)
                            .offset(y = EYES_OFFSET_Y)
                    )
                }

                if (showNose) {
                    Image(
                        painter = painterResource(R.drawable.nose),
                        contentDescription = "Nose",
                        modifier = Modifier
                            .fillMaxSize(NOSE_RATIO)
                            .offset(y = NOSE_OFFSET_Y)
                    )
                }

                if (showLips) {
                    Image(
                        painter = painterResource(R.drawable.lips),
                        contentDescription = "Lips",
                        modifier = Modifier
                            .fillMaxSize(LIPS_RATIO)
                            .offset(y = LIPS_OFFSET_Y)
                    )
                }
            }

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 40.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                AvatarToggle("Brows", showBrows) { showBrows = it }
                AvatarToggle("Eyes", showEyes) { showEyes = it }
                AvatarToggle("Nose", showNose) { showNose = it }
                AvatarToggle("Lips", showLips) { showLips = it }
            }
        }
    }
}

@Composable
fun AvatarToggle(
    label: String,
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    Row(verticalAlignment = Alignment.CenterVertically) {
        Checkbox(
            checked = checked,
            onCheckedChange = onCheckedChange,
            colors = CheckboxDefaults.colors(
                checkedColor = Color(0xFF6D4C41),
                uncheckedColor = Color(0xFF9E9D24),
                checkmarkColor = Color.White
            )
        )
        Text(
            text = label,
            fontSize = 14.sp,
            color = Color(0xFF3E2723),
            modifier = Modifier.offset(x = (-4).dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewAvatar() {
    AvatarMain()
}
